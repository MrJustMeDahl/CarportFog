@startuml

Class User {
- int userID
- String email
- String password
- String name
- int phoneNumber
- String address
- String role
- List<Order> orders

+ User(int userID, String email, String password, String name,int phoneNumber, String address, String role)
+ User(int userID, String email, String password, String name,int phoneNumber, String address, String role, ConnectionPool connectionPool)
}

Class Order{
- int orderID
- int userID
- boolean orderStatus
- Carport carport
- double price
- double indicativePrice

+ Order (int orderID, int userID, String orderStatus, Carport carport, double price, double indicativePrice)
}

Class Carport{
- double price
- double indicativePrice
- Map<Material, Integer> materials

+ Carport(Map<Material, Integer materials, int width, int length, int minHeight)
+ Carport(Map<Material, Integer materials, double price, double indicativePrice, int width, int length, int minHeight)
- double calculatePrice()
- double calculateIndicativePrice()
}

Abstract Class Material{
# int materialID
# String Description
# String type
# String function
# double price
# int length

# Material(int materialID, String description, String type, String function, double price, int length)
+ abstract double getPrice()
}

Class Rafter{
Rafter(int materialID, String description, String type, String function, double price, int length)
+ double getPrice()
}

Class Post{
Post(int materialID, String description, String type, String function, double price, int length)
+ double getPrice()
}

Class Purlin{
Purlin(int materialID, String description, String type, String function, double price, int length)
+ double getPrice()
}


class UserMapper{
<<static>>
+ User login(String email, String password, ConnectionPool connectionPool) throws DatabaseException
+ User createUser(String name, String email, String password, ConnectionPool connectionPool) throws DatabaseException
+ User getUserByID (int userID, ConnectionPool connectionPool) throws DatabaseException
+ List<User> getAllUsers(ConnectionPool, connectionPool) throws DatabaseException
}

class OrderMapper{
<<static>>
+ Order createOrder (Carport carport, int UserID, ConnectionPool connectionPool) throws DatabaseException
+ Order getOrderByOrderID(int orderID, ConnectionPool connectionPool) throws DatabaseException
+ List<Order> getAllOrders(ConnectionPool connectionPool) throws DatabaseException
+ List<Order> getOrdersByUserID(Int userID, ConnectionPool connectionPool) throws DatabaseException
+ void editOrder (int orderID, ConnectionPool connectionPool) throws DatabaseException
+ void updateApproveOrder (int orderID, ConnectionPool connectionPool) throws DatabaseException
+ void updateOrderPayment (int orderID, ConnectionPool connectionPool) throws DatabaseException
+ void deleteOrder ( int orderID, ConnectionPool connectionPool) throws DatabaseException
+ getCarportForOrder(int orderID, ConnectionPool connectionPool) throws DatabaseException
}

class MaterialMapper{
<<static>>
void materialPriceUpdate (int materialID, double price, ConnectionPool connectionPool) throws DatabaseException
void materialAdd (String name, double price,String materialTypeDescription, String materialDescription, String functionDescription, ConnectionPool connectionPool) throws DatabaseException
void materialDelte (int materialID, ConnectionPool connectionPool) throws DatabaseException
List<Rafter> rafters (ConnectionPool connectionPool) throws DatabaseException
List<Post> posts (ConnectionPool connectionPool) throws DatabaseException
List<Purlin> purlins (ConnectionPool connectionPool) throws DatabaseException
list<Materials> partList (int OrderId, rafters, posts, purlins, ConnectionPool connectionPool) throws DatabaseException
}

class ConnectionPool{
- HikariDataSource ds
- String USER
- String PASSWORD
- STRING URL
+ ConnectionPool(String USER, String PASSWORD, String URL)
+ void close()
}

User *-- Order
Order *-- Carport
Carport *-- Material
Material <|-- Rafter
Material <|-- Post
Material <|-- Purlin












@enduml