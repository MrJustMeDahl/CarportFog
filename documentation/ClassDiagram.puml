@startuml

Class User {
- int userID
- String email
- String password
- String name
- int phoneNumber
- String address
- String role
- List<Order> orders

+ User(int userID, String email, String password, String name,int phoneNumber, String address, String role)
}

Class Order{
- int orderID
- int userID
- boolean orderStatus
- Carport carport
- double price
- double indicativePrice

+ Order (int orderID, int userID, String orderStatus, Carport carport, double price, double indicativePrice)
}

Class Carport{
- double price
- double indicativePrice
- Map<Material, Integer> materials

+ Carport(Map<Material, Integer materials, int width, int length, int minHeight)
+ Carport(Map<Material, Integer materials, double price, double indicativePrice, int width, int length, int minHeight)
- double calculatePrice()
- double calculateIndicativePrice()
}

Abstract Class Material{
# int materialID
# String Description
# String type
# String function
# double price
# int length

# Material(int materialID, String description, String type, String function, double price, int length)
+ abstract double getPrice()
+ abstract double calculateActualPrice()
}

Class Rafter{
- double actualPrice
Rafter(int materialID, String description, String type, String function, double price, int length)
+ double getPrice()
+ double calculateActualPrice()
}

Class Post{
- double actualPrice
Post(int materialID, String description, String type, String function, double price, int length)
+ double getPrice()
+ double calculateActualPrice()
}

Class Purlin{
- double actualPrice
Purlin(int materialID, String description, String type, String function, double price, int length)
+ double getPrice()
+ double calculateActualPrice()
}


class UserMapper{
<<static>>
+ User login(String email, String password, ConnectionPool connectionPool) throws DatabaseException
+ User createUser(String name, String email, String password, ConnectionPool connectionPool) throws DatabaseException
+ Set<User> getUsersForOrders(List<Order> orders, ConnectionPool connectionPool) throws DatabaseException
}

class OrderMapper{
<<static>>
+ Order createOrder (Carport carport, int UserID, ConnectionPool connectionPool) throws DatabaseException
+ List<Order> getOrdersByUserID(Int userID, ConnectionPool connectionPool) throws DatabaseException
+ void updateOrderOrdered(int orderID, ConnectionPool connectionPool) throws DatabaseException
+ void updateOrderPayed (int orderID, ConnectionPool connectionPool) throws DatabaseException
+ Map<Material, Integer> getMaterialsForCarport(int orderID, ConnectionPool connectionPool) throws DatabaseException
+ List<Order> getNewOrders(ConnectionPool connectionPool) throws DatabaseException
+ boolean deleteOrder(int orderID, ConnectionPool connectionPool) throws DatabaseException
}

class MaterialMapper{
<<static>>
+ List<Rafter> rafters (ConnectionPool connectionPool) throws DatabaseException
+ List<Post> posts (ConnectionPool connectionPool) throws DatabaseException
+ List<Purlin> purlins (ConnectionPool connectionPool) throws DatabaseException
+ List<String> getAllMaterialTypes(ConnectionPool connectionPool)
+ List<String> getAllMaterialBuildFunctions(ConnectionPool connectionPool)
+ updateMaterial (int materialId, double newPrice, String newDescription, (ConnectionPool connectionPool)) throws DatabaseException
+ int createNewMaterial(String description, int materialType, int materialFunction, double price, (ConnectionPool connectionPool)) throws DatabaseException
+ int addLength (int materialId, int length, (ConnectionPool connectionPool)) throws DatabaseException
}

class ConnectionPool{
- HikariDataSource ds
- String USER
- String PASSWORD
- STRING URL
+ ConnectionPool(String USER, String PASSWORD, String URL)
+ void close()
}

User *-- Order
Order *-- Carport
Carport *-- Material
Material <|-- Rafter
Material <|-- Post
Material <|-- Purlin












@enduml