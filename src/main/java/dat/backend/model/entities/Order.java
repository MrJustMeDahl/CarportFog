package dat.backend.model.entities;

/**
 * This class contains all the data of an order and the methods needed to update an order.
 * @author MrJustMeDahl
 */
public class Order {

    private final int orderID;
    private final int userID;
    private Carport carport;
    private String orderStatus;
    private double price;
    private double indicativePrice;
    private ItemList itemList;

    /**
     * Constructor is used for creating a new order and generating an existing order from the database.
     * @param orderID The order's id number - generated by the database.
     * @param userID The id number of the user which who made the order.
     * @param carport An object of the Carport/product on the order.
     * @param orderStatus pending/approved/paid/closed.
     * @param price Cost price of all items on the order.
     * @param indicativePrice Suggested sales price of the entire order.
     * @author MrJustMeDahl
     */
    public Order(int orderID, int userID, Carport carport, String orderStatus, double price, double indicativePrice, ItemList itemList){
        this.orderID = orderID;
        this.userID = userID;
        this.carport = carport;
        this.orderStatus = orderStatus;
        this.price = price;
        this.indicativePrice = indicativePrice;
        this.itemList = itemList;
    }

    public void setPrice() {
        if(carport.shed == null){
            this.price = carport.calculatePrice();
        }
        else {
            this.price = carport.calculatePrice() + carport.shed.calculatePrice();
        }

    }

    public void setIndicativePrice() {
        this.indicativePrice = carport.calculateIndicativePrice();
    }

    public void setItemList(ItemList itemList) {
        this.itemList = itemList;
    }

    public void setOrderStatus(String orderStatus) {
        this.orderStatus = orderStatus;
    }

    public void setIndicativePrice(double indicativePrice) {
        this.indicativePrice = indicativePrice;
    }

    public ItemList getItemList() {
        return itemList;
    }

    public Order(int orderID, int userID, String orderStatus, double price) {
        this.orderID = orderID;
        this.userID = userID;
        this.orderStatus = orderStatus;
        this.price = price;
    }

    public int getOrderID() {
        return orderID;
    }

    public int getUserID() {
        return userID;
    }

    public Carport getCarport() {
        return carport;
    }

    public String getOrderStatus() {
        return orderStatus;
    }

    public double getPrice() {
        return price;
    }

    public double getIndicativePrice() {
        return indicativePrice;
    }
}
